/* pdc_disk.cpp
 * File I/O for the PD-Chess package
 * (C) Copyright 1994 by Tom Weatherhead
 * Started January 31, 1994
 */

// ThAW 2020-03-12 : TODO: Rename this file to disk.c

#include <stdlib.h>
#include <stdio.h>
#include "pdchess.h"


typedef struct {
	char * ptr;
	unsigned int idx;
} index_table_type;


static bool table_lookup( index_table_type * table, unsigned int table_size,
	char ** ptrptr, char * array, unsigned int array_elt_size )
{
	unsigned int i;

	if( *ptrptr == NULL ) return( TRUE ); /* Don't translate NULL */

	for( i = 0; i < table_size; i++ ) {

		if( *ptrptr == table[i].ptr ) {
			*ptrptr = array + array_elt_size * table[i].idx;
			return( TRUE );
		}
	}

	/*    printf( "Load error: index not found in table\n" ); */
	return( FALSE );
}


bool load_game( army_type army[], army_type ** ownerPP )
{
	char filename[80], * move_rec_ptr, ** pc_ptr;
	unsigned int i, j, table_size, row, col;
	FILE * fp;
	shared_type * sh = army->sh, old_sh = *sh;
	piece_type * pc;
	//    bool (*human_move_func)(army_type **);
	army_type * owner;
	index_table_type * table;
	move_type move = { 0, 0, 0, 0, REGULAR_MOVE, NULL, NULL };

	printf( "Load: filename: " );
	scanf( "%s", filename );

	if( (fp = fopen( filename, "r" ) ) == NULL ) {
		printf( "File '%s' not found\n", filename );
		return( FALSE );
	}

	/* Read data from the file */
	fscanf( fp, "%d", &table_size );
	table = (index_table_type *)malloc( table_size*sizeof(index_table_type) );
	fread( table, sizeof(index_table_type), table_size, fp );
	//    fread( &human_move_func, sizeof(human_move_func), 1, fp );
	fread( army, sizeof(army_type), 2, fp );
	fread( sh, sizeof(shared_type), 1, fp );
	free( sh->move_rec );
	sh->move_rec = (char *)malloc( sh->move_rec_size );
	fread( sh->move_rec, sizeof(char), sh->move_rec_idx, fp );
	fclose( fp );

	/* Restore pointers in shared data */
	sh->pc_def = old_sh.pc_def;
	/*    memcpy( sh->move_arrays, old_sh.move_arrays,
			MAX_MAX_PLY * sizeof(move_type *) ); */

	/* Restore pointers in army structs */

	for( i = 0; i < 2; i++ ) {
		owner = &army[i];
		/* Set name, opponent in a shared init proc? */
		owner->sh = sh;
		owner->opponent = &army[1 - i];
		owner->name = (i == O_WHITE) ? "White" : "Black";
		//	owner->move_proc = (owner->move_proc == human_move_func) ? &human_move
		//	  : &computer_move;

		for( j = 0; j < owner->num_pieces; j++ ) {
			pc = &owner->pieces[i];
			pc->owner = owner;
			/* Rectify pointers to piece definitions */
			table_lookup( table, table_size, (char **)&pc->def,
				(char *)(sh->pc_def), sizeof(piece_def_type) );
		}

		/* Restore ep_pawn */
		table_lookup( table, table_size, (char **)&owner->ep_pawn,
			(char *)(owner->pieces), sizeof(piece_type));
	}

	/* Restore sh->board */

	for( row = 0; row < BOARD_SIZE; row++ ) {

		for( col = 0; col < BOARD_SIZE; col++ ) {
			pc_ptr = (char **)&sh->board.ptr[row][col];

			if( *pc_ptr == NULL ) continue;

			if( !table_lookup( table, table_size, pc_ptr,
				(char *)(army[0].pieces), sizeof(piece_type))
				&&  !table_lookup( table, table_size, pc_ptr,
				(char *)(army[0].pieces), sizeof(piece_type))) {

				printf( "Unresolved pointer at board[%d][%d]\n", row, col );
				free( table );
				return( FALSE );
			}
		}
	}

	if( sh->open_move_ptr != NULL ) {
		/* Use recorded moves to find new open_move ptrs */
		open_open_book( sh );

		for( i = 0, move_rec_ptr = sh->move_rec; i < sh->move_rec_idx; i += 2,
			move_rec_ptr += 2 ) {

			if( *move_rec_ptr == 64 ) {
				move.type = CASTLE_KSIDE;
				move.r1 = move.c1 = move.r2 = move.c2 = 0;
			} else if( *move_rec_ptr == 72 ) {
				move.type = CASTLE_QSIDE;
				move.r1 = move.c1 = move.r2 = move.c2 = 0;
			} else {
				move.type = REGULAR_MOVE;
				move.r1 = *move_rec_ptr / 8;
				move.c1 = *move_rec_ptr % 8;
				move.r2 = *(move_rec_ptr+1) / 8;
				move.c2 = *(move_rec_ptr+1) % 8;
			}

			open_match_move( sh, &move );

			/* Next line should be redundant */
			if( sh->open_move_ptr == NULL ) break;
		}
	}

	*ownerPP = &army[(sh->move_rec_idx % 4 == 0) ? O_WHITE : O_BLACK];
	free( table );
	return( TRUE );
}


bool save_game( army_type army[] )
{
	//    bool (*human_move_func)(army_type **);
	char filename[80];
	unsigned int i, table_size, table_idx = 0;
	FILE * fp;
	shared_type * sh = army->sh;
	index_table_type * table;

	printf( "Load: filename: " );
	scanf( "%s", filename );

	if( (fp = fopen( filename, "w" ) ) == NULL ) {
		printf( "Can't write to file '%s'\n", filename );
		return( FALSE );
	}

	/* Create pointer-index cross-reference table */
	table_size = army[0].num_pieces + army[1].num_pieces + NUM_PIECE_DEFS;
	table = (index_table_type *)malloc( table_size*sizeof(index_table_type));

	for( i = 0; i < army[0].num_pieces; i++ ) {
		table[table_idx].idx = i;
		table[table_idx++].ptr = (char *)&army[0].pieces[i];
	}

	for( i = 0; i < army[1].num_pieces; i++ ) {
		table[table_idx].idx = i;
		table[table_idx++].ptr = (char *)&army[1].pieces[i];
	}

	for( i = 0; i < NUM_PIECE_DEFS; i++ ) {
		table[table_idx].idx = i;
		table[table_idx++].ptr = (char *)&army->sh->pc_def[i];
	}

	//    human_move_func = &human_move;

	/* Write data to the file */
	fprintf( fp, "%d", table_size );
	fwrite( table, sizeof(index_table_type), table_size, fp );
	//    fwrite( &human_move_func, sizeof(human_move_func), 1, fp );
	fwrite( army, sizeof(army_type), 2, fp );
	fwrite( sh, sizeof(shared_type), 1, fp );
	fwrite( sh->move_rec, sizeof(char), sh->move_rec_idx, fp );
	fclose( fp );
	free( table );
	return( TRUE );
}
